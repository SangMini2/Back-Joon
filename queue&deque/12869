import sys
input = sys.stdin.readline
from collections import deque
from itertools import permutations

# 중복을 dp로 제거 / BFS
n = int(input())
lst = list(map(int, input().strip().split()))
len_lst = len(lst)
max_value = max(lst) + 1
q = deque()
lst.append(0) # cnt 추가
q.append(lst)

if len_lst == 3:
    dp = [[[0] * max_value for _ in range(max_value)] for _ in range(max_value)]
    mutal_attack = list(permutations([9, 3, 1], 3))
    
    while q:
        first, second, third, cnt = q.popleft()
        if first==0 and second==0 and third==0:
            print(cnt)
            break
        for nine, three, one in mutal_attack:
            n_f = first - nine # new_first
            n_s = second - three
            n_t = third - one
            if n_f < 0: n_f = 0
            if n_s < 0: n_s = 0
            if n_t < 0: n_t = 0
            
            if dp[n_f][n_s][n_t] == 0:
                q.append([n_f, n_s, n_t, cnt + 1])
                dp[n_f][n_s][n_t] = 1
  

elif len_lst == 2:
    dp = [[0] * max_value for _ in range(max_value)]
    mutal_attack = list(permutations([9, 3], 2))
    
    while q:
        first, second, cnt = q.popleft()
        if first==0 and second==0:
            print(cnt)
            break
        for nine, three in mutal_attack:
            n_f = first - nine # new_first
            n_s = second - three
            if n_f < 0: n_f = 0
            if n_s < 0: n_s = 0
            
            if dp[n_f][n_s] == 0:
                q.append([n_f, n_s, cnt + 1])
                dp[n_f][n_s] = 1

else:
    
    if lst[0] % 9 == 0:
        print(lst[0] // 9)
    else:
        print(lst[0] // 9 + 1)
