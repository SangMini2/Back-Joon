#with DFS. my code. Time Over Code.
import sys
input = sys.stdin.readline
from collections import deque

a , b = map(int, input().split())
first_maze = []
maze = deque()
for _ in range(a) :
    first_maze.append(input().strip())

for num in first_maze :
    k = []
    for i in range(b) :
        k.append(int(num[i]))
    maze.append(k)

total = 1
x,y = 0,0
stack = deque()
path = deque([[0,0]])
maze[0][0] = 0
while True :
    while y + 1 <= b - 1 and maze[x][y + 1] == 1 : #오른쪽 이동
        maze[x][y+1] = 0
        if (x + 1 <= a - 1 and maze[x + 1][y] == 1) or (x - 1 >= 0 and maze[x-1][y] == 1 ) : #밑쪽 이동
            stack.append([x,y])
        y += 1
        path.append([x,y])
    if x == a - 1 and y == b - 1: break
    while x + 1 <= a - 1 and maze[x+1][y] == 1 : #밑쪽 이동
        maze[x+1][y] = 0
        if (y + 1 <= b - 1 and maze[x][y + 1] == 1) or (y - 1 >= 0 and maze[x][y-1] == 1): #오른쪽도 가능.
            stack.append([x, y])
        x += 1
        path.append([x, y])
    if x == a - 1 and y == b - 1: break
    while x - 1 >= 0 and maze[x-1][y] == 1 : #위쪽가능
        maze[x-1][y] = 0
        if (y + 1 < b and maze[x][y+1] == 1) or (y - 1 >= 0 and maze[x][y-1] == 1) :#오른쪽가능
            stack.append([x,y])
        x -= 1
        path.append([x,y])
    if x == a - 1 and y == b - 1: break
    while y - 1 >= 0 and maze[x][y-1] == 1 : #왼쪽가능
        maze[x][y-1] = 0
        if (x + 1 < a and maze[x+1][y] == 1) or (x - 1 >= 0 and maze[x-1][y] == 1) :
            stack.append([x,y])
        y -= 1
    if x == a - 1 and y == b - 1: break

    if x == a - 1 : #젤 밑에층
        if (y == 0 and maze[x][y+1] == 0) or (maze[x][y-1] == 0 and maze[x][y+1] == 0):
            goal = stack.pop()
            while True :
                if goal == path.pop() : break
            x , y = goal[0] , goal[1]
            path.append(goal)

    elif y == b - 1 : #젤 오른쪽줄
        if (x == 0 and maze[x+1][y] == 0) or (maze[x-1][y] == 0 and maze[x+1][y] == 0) :
            goal = stack.pop()
            while True :
                if goal == path.pop() : break
            x , y = goal[0] , goal[1]
            path.append(goal)

print(len(path))


#with BFS. It's Correct. No time out.
import sys
input = sys.stdin.readline
from collections import deque

a , b = map(int, input().split())
first_maze = []
maze = deque()
for _ in range(a) :
    first_maze.append(input().strip())

for num in first_maze :
    k = []
    for i in range(b) :
        k.append(int(num[i]))
    maze.append(k)

end_x = a - 1
end_y = b - 1
x,y = 0,0
d = [-1, 1]
#d = [-1, 1]

stack = deque()
path = deque([[0,0]])
dx = [-1,1,0,0]
dy = [0,0,-1,1]
while path :
    some = path.popleft()
    if some == [end_x, end_y] : break
    x = some[0]
    y = some[1]
    for i in range(4) :
        new_x = x + dx[i]
        new_y = y + dy[i]
        if new_x >= 0 and new_x <= end_x and new_y >= 0 and new_y <= end_y :
            if maze[new_x][new_y] == 1 :
                path.append([new_x,new_y])
                maze[new_x][new_y] = maze[x][y] + 1


print(maze[end_x][end_y])
