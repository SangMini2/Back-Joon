import sys
input = sys.stdin.readline
from collections import deque

r, c = map(int, input().strip().split())

arr = []
start_q = deque()
fire_q = deque()
visited = [[0] * c for _ in range(r)]

for i in range(r):
    lst = list(input().strip())
    arr.append(lst)
    for j in range(c):
        if lst[j] == "J":
            start_q.append((i,j))
            visited[i][j] = 1
            lst[j] = "."
        elif lst[j] == "F":
            fire_q.append((i, j))

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

q = deque()
q.append((start_q, fire_q, 1))
ans = float('inf')

while q:
    pos_queue, fire_queue, cnt = q.popleft()
    new_fire_q = deque()
    flag = 0
    
    while fire_queue:
        fire = fire_queue.popleft()
        fire_x, fire_y = fire
        for i in range(4):
            fire_nx = fire_x + dx[i]
            fire_ny = fire_y + dy[i]
            if 0 <= fire_nx < r and 0 <= fire_ny < c and arr[fire_nx][fire_ny] == ".":
                arr[fire_nx][fire_ny] = "F"
                new_fire_q.append((fire_nx, fire_ny))
    
    new_pos_q = deque()
    while pos_queue:
        pos = pos_queue.popleft()
        pos_x, pos_y = pos
        if pos_x == 0 or pos_x == r-1 or pos_y == 0 or pos_y == c-1:
            ans = cnt
            flag = 1
            break
        
        for j in range(4):
            pos_nx = pos_x + dx[j]
            pos_ny = pos_y + dy[j]
            if 0 <= pos_nx < r and 0 <= pos_ny < c and arr[pos_nx][pos_ny] == '.' and visited[pos_nx][pos_ny] == 0:
                visited[pos_nx][pos_ny] = 1
                new_pos_q.append((pos_nx, pos_ny))

    if flag == 1: break
    
    if new_pos_q:
        q.append((new_pos_q, new_fire_q, cnt + 1))

if ans == float('inf'):
    print("IMPOSSIBLE")
else:
    print(ans)
