import sys
input = sys.stdin.readline
from collections import deque

n, m = map(int, input().strip().split())

visited = [[0] * m for _ in range(n)]
cheezes = deque()
arr = []
for i in range(n):
    sub_arr = list(map(int, input().strip().split()))
    for j in range(m):
        if sub_arr[j] == 1:
            cheezes.append([i, j])
    arr.append(sub_arr)

# [0, 0]은 무조건 치즈가 놓이지 않는다.
# 밖은 2로 둔다.

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

def find_outside(start):
    arr[start[0]][start[1]] = 2
    q = deque()
    q.append(start)
    while q:
        x, y = q.popleft()
        for i in range(4):
            nx, ny = x + dx[i], y + dy[i]
            if 0 <= nx < n and 0 <= ny < m and arr[nx][ny] == 0:
                arr[nx][ny] = 2
                q.append([nx, ny])
    return

# 주변에 2가 있는지 체크
def check_outside(x, y):
    # x, y = point
    for j in range(4):
        nx, ny = x + dx[j], y + dy[j]
        if 0 <= nx < n and 0 <= ny < m and arr[nx][ny] == 2:
            return 1
    return 0

cnt = 0
outside_point = [0 ,0]
cheeze_cnt = []
while cheezes:
    find_outside(outside_point)
    cheeze_cnt.append(len(cheezes))
    new_cheeze = deque()
    become_outside = deque()
    while cheezes:
        cheeze_x, cheeze_y = cheezes.popleft()
        if check_outside(cheeze_x, cheeze_y): #밖이랑 연결이 되어 있음
            become_outside.append((cheeze_x, cheeze_y))
        else:
            new_cheeze.append([cheeze_x, cheeze_y])
    
    while become_outside:
        become_x, become_y = become_outside.popleft()
        arr[become_x][become_y] = 2
        find_outside([become_x, become_y])
    
    cheezes = new_cheeze
    cnt += 1

print(cnt)
if cheeze_cnt:
    print(cheeze_cnt[-1])
else:
    print(0)
