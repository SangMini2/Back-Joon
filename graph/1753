import sys
input = sys.stdin.readline
from copy import deepcopy
from collections import deque
import heapq

V , e = map(int, input().strip().split())
start = int(input())
lst = [float('inf')] * (V+1)
graph =[[] for _ in range(V+1)]

for i in range(e) :
    u,v,w = (map(int, input().strip().split()))
    graph[u].append((v,w))

lst[start] = 0
heap = []
heapq.heappush(heap , (0, start))
while heap :
    weight , node = heapq.heappop(heap)
    if lst[node] < weight :
        continue
    for next_node , plus in graph[node] :
        next_weight = weight + plus

        if next_weight < lst[next_node] :
            lst[next_node] = next_weight
            heapq.heappush(heap, (next_weight , next_node))

for num in lst[1:] :
    if num == float('inf') :
        print("INF")
    else :
        print(num)
