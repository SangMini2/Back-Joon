import sys
input = sys.stdin.readline
from collections import deque

n, m = map(int, input().strip().split())
arr = [list(input().strip()) for _ in range(n)]

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

def bfs(x, y):
    local_max = 0
    visited = [[-1] * m for _ in range(n)]
    visited[i][j] = 0
    q = deque()
    q.append((x, y))
    
    while q:
        ox, oy = q.popleft()
        for k in range(4):
            nx, ny = ox + dx[k], oy + dy[k]
            if 0 <= nx < n and 0 <= ny < m and visited[nx][ny] == -1 and arr[nx][ny] == "L":
                q.append((nx, ny))
                visited[nx][ny] = visited[ox][oy] + 1
                local_max = max(local_max, visited[nx][ny])
    
    return local_max

global_ans = 0
for i in range(n):
    for j in range(m):
        if arr[i][j] == "L":
            global_ans = max(bfs(i, j), global_ans)

print(global_ans)
